#pragma once
#include "../common/define.h"

class IClientServerAPI
{
public:
	virtual void help(OUT BSTR* v) = 0;

	/* C1
	原型：	int SOF_GetVersion(unsigned int *puiVersion)
	描述：	获取接口的版本号
	参数：	puiVersion [out]	版本号
	返回值：	0	成功
	非0	失败，返回错误代码
	备注：	版本号的格式为：0xAAAABBBB,其中AAAA为主版本号，BBBB为次版本号。
	*/
	CLIENTAPI(1) virtual int SOF_GetVersion(OUT unsigned int *puiVersion) = 0;

	/* S1
	原型：	int SOF_SetCertTrustList(BSTR CTLAltName, BSTR CTLContent, int CTLContentLen);
	描述：	设置证书信任列表
		参数：	CTLAltName[in]		证书信任列表别名
		CTLContent[in]	证书信任列表内容(Base64编码格式)
		CTLContentLen[in]	证书信任列表长度
		返回值：	0	成功
		其他	失败，详见错误码列表
		备注：	错误代码：SOR_PARAMERR：参数错误
	*/
	SERVERAPI(1) virtual int  SOF_SetCertTrustList(BSTR CTLAltName, BSTR CTLContent, int CTLContentLen) = 0;

	/* S2
	原型：	BSTR SOF_QueryCertTrustListAltNames();
	描述：	查询证书信任列表别名
	参数：	无
	返回值：	非空	成功，信任列表别名的字符串组合,如“CA001@CA002@CA003”
	其他	失败，详见错误码列表
	备注：	错误代码：SOR_CTLNOTFOUND：没有信任列表
	*/
	SERVERAPI(2) virtual BSTR SOF_QueryCertTrustListAltNames() = 0;

	/* S3
	原型：	BSTR SOF_QueryCertTrustList (BSTR CTLAltName);
	描述：	根据别名查询证书信任列表
	参数：	BSTR CTLAltName[in]	证书信任列表别名
	返回值：	非空	成功，Base64编码格式的证书信任列表；
	其他	失败，详见错误码列表
	备注：	SOR_CTLNOTFOUND：没有信任列表
	SOR_PARAMERR：参数错误。
	*/
	SERVERAPI(3) virtual BSTR SOF_QueryCertTrustList(BSTR CTLAltName) = 0;

	/* S4
	原型：	int SOF_DelCertTrustList(BSTR CTLAltName);
	描述：	根据别名删除证书信任列表
	参数：	CTLAltName[in]	证书信任列表别名
	返回值：	0	成功
	其他	失败，详见错误码列表
	备注：	SOR_NULLPOINTER：参数为空指针
	SOR_CTLNOTFOUND：没有对应的信任列表
	*/
	SERVERAPI(4) virtual int  SOF_DelCertTrustList(BSTR CTLAltName) = 0;

	/* S5
	原型：	int SOF_SetWebAppName(BSTR WebAppName);
	描述：	设置web应用的名称。该名称要和服务器xml文件对应。接口从xml文件中读取webapp的属性包括使用的证书、可信的根证书、证书验证的策略等
	参数：	WebAppName[in]	应用的名称
	返回值：	0	成功
	其他	失败，详见错误码列表
	备注：	SOR_NULLPOINTER：参数为空指针。
	SOR_APPNOTFOUND：应用没发现
	*/
	SERVERAPI(6) virtual int  SOF_SetWebAppName(BSTR WebAppName) = 0;


	/* C2 S6
	原型：	Void SOF_SetSignMethod(int SignMethod);
	描述：	设置控件签名使用的签名算法；使用非对称加密算法时，也是通过这个函数来设置
		参数：	SignMethod[in]
		返回值：	无
	*/
	CLIENTAPI(2) SERVERAPI(6) virtual void SOF_SetSignMethod(int SignMethod) = 0;


	/* C3 S7
	原型：	int SOF_GetSignMethod();
	描述：	获得控件签名使用的签名算法
	参数：	无	
	返回值：	获得当前的签名算法代码	详见表5“算法代码表”。
	*/ 
	CLIENTAPI(3) SERVERAPI(7) virtual int SOF_GetSignMethod() = 0;

	/* C4 S8
	原型：	Void SOF_SetEncryptMethod (int EncryptMethod) ;
	描述：	设置控件使用的对称加解密算法。
	参数：	EncryptMethod	[IN] 对称加解密算法，详见表5“算法代码表”
	返回值：	无
	*/
	CLIENTAPI(4) SERVERAPI(8) virtual void SOF_SetEncryptMethod(int EncryptMethod) = 0;

	/* C5 S9
	原型：	int SOF_GetEncryptMethod();
	描述：	获得控件使用的对称加解密算法代码。详见表5“算法代码表”。
	参数：	无	
	返回值：	当前控件使用的加密算法	
	*/
	CLIENTAPI(5) SERVERAPI(9) virtual int SOF_GetEncryptMethod() = 0;

	/* C6
	原型：	BSTR SOF_GetUserList();
	描述：	取得当前已安装证书的用户列表
	参数：	无
	返回值：	BSTR ret  用户列表字符串	数据格式：(用户1||标识1&&&用户2||标识2&&&…)
	*/
	CLIENTAPI(6) virtual BSTR SOF_GetUserList() = 0;

	/* S10
	原型：	BSTR SOF_GetServerCertificate(int CertUsage);
	描述：	读取当前应用指定的服务器证书
		参数：	int CertUsage 证书用途	证书用途法1：交换证书、2：签名证书
		返回值：	Base64编码的服务器证书	成功
		Null	失败
		备注：	错误代码SOR_PARAMETERNOTSUPPORT：不支持的参数
	*/
	SERVERAPI(10) virtual BSTR SOF_GetServerCertificate(int CertUsage) = 0;

	/* C7
	原型：	BSTR SOF_ExportUserCert(BSTR CertID);
	描述：	根据证书实体唯一标识，获取Base64编码的证书字符串。
	参数：	BSTR CertID [in]	输入参数，证书实体唯一标识
	返回值：	BSTR rv	证书字符串
			空	失败空值
	备注：	如果是双证书，导出的是签名证书。
	*/
	CLIENTAPI(7) virtual BSTR SOF_ExportUserCert(BSTR CertID) = 0;

	/* C8
	原型：	int SOF_Login(BSTR CertID, BSTR PassWd)
	描述：	校验证书口令
	参数：	BSTR CertID [in]	输入参数，证书实体唯一标识
			BSTR PassWd [in]	输入参数，口令
	返回值：	成功返回0；失败时返回密码重试的剩余次数；锁死时返回 -1
	*/
	CLIENTAPI(8) virtual int SOF_Login(BSTR CertID, BSTR PassWd) = 0;

	/* C9 
	原型：	BOOL  SOF_ChangePassWd(BSTR CertID, BSTR OldPassWd，BSTR NewPassWd)
	描述：	修改证书口令
	参数：	BSTR CertID [in]	输入参数，证书实体唯一标识
			BSTR OldPassWd [in]	输入参数，旧口令
			BSTR NewPassWd [in]	输入参数，新口令
	返回值：	成功 TRUE，失败 FALSE
	*/
	CLIENTAPI(9) virtual BOOL  SOF_ChangePassWd(BSTR CertID, BSTR OldPassWd, BSTR NewPassWd) = 0;

	/* C10 
	原型：	BSTR SOF_ExportExChangeUserCert (BSTR CertID) ;
	描述：	根据证书实体唯一标识，获取Base64编码的证书字符串。指定获取加密（交换）证书
	参数：	BSTR CertID[in]	证书实体唯一标识
	返回值：	BSTR rv	获取Base64编码的证书字符串
			空值		失败
	*/
	CLIENTAPI(10) virtual BSTR SOF_ExportExChangeUserCert(BSTR CertID) = 0;

	/* C11 S12
	原型：	BSTR SOF_GetCertInfo(BSTR Cert, short Type);
	描述：	获取证书信息
	参数：	BSTR Cert[in]	Base64编码的证书
			short Type[in]	获取信息的类型，TYPE参数见表3“证书信息解析代码表”。
	返回值：	BSTR	ret		证书信息
			空值				失败
	*/
	CLIENTAPI(11) SERVERAPI(12) virtual BSTR SOF_GetCertInfo(BSTR Cert, short Type) = 0;


	/* C12 S13
	原型：	BSTR SOF_GetCertInfoByOid(BSTR Cert, BSTR Oid) ;
	描述：	根据OID获取证书私有扩展项信息
	参数：	BSTR Cert[in]	Base64编码的证书
			BSTR Oid [in]	私有扩展对象ID，比如“1.2.156.xxx”
	返回值：	BSTR ret	证书OID对应的值
			空值			失败
	*/
	CLIENTAPI(12) SERVERAPI(13) virtual BSTR SOF_GetCertInfoByOid(BSTR Cert, BSTR Oid) = 0;


	/* C13
	原型：	BSTR SOF_GetUserInfo (BSTR CertId, short type) ;
	描述：	获得用户信息
	参数：	BSTR Certid[in]	证书标识
			type[in]	信息类别，参数和意义见表4“证书对应信息表”。
	返回值：	BSTR ret	type对应的值
			空值			失败
	*/
	CLIENTAPI(13) virtual BSTR SOF_GetUserInfo(BSTR CertId, short type) = 0;

	/* C14 S14
	原型：	BOOL SOF_ValidateCert(BSTR Cert);
	描述：	验证证书有效性
	参数：	BSTR Cert[in]	Base64编码的证书
	返回值：	TRUE	成功
			FALSE	失败
	空值	失败
	*/
	CLIENTAPI(SERVERAPI(14)) virtual BOOL SOF_ValidateCert(BSTR Cert) = 0;

	/* C15 S15
	原型：	BSTR SOF_SignData(BSTR CertID, BSTR InData) ;
	描述：	对字符串数据进行数字签名，签名格式为PKCS#1
	参数：	BSTR CertID[in]	证书标识
			BSTR  InData[in] 签名原文
	返回值：	BSTR  ret	签名结果, BASE64编码
	空值	失败
	*/
	CLIENTAPI(SERVERAPI(15)) virtual BSTR SOF_SignData(BSTR CertID, BSTR InData) = 0;

	/* C16 S16
	原型：	BOOL SOF_VerifySignedData(BSTR Cert, BSTR InData, BSTR SignValue) ;
	描述：	验证数字签名
	参数：	BSTR Cert[in]	签名者证书，BASE64编码
			BSTR  InData[in]	签名原文
			BSTR  SignValue[in]	签名值，BASE64编码
	返回值：	TRUE	成功
	FALSE	失败
	*/
	CLIENTAPI(SERVERAPI(16)) virtual BOOL SOF_VerifySignedData(BSTR Cert, BSTR InData, BSTR SignValue) = 0;
	 
	/* C17 S17
	原型：	BSTR SOF_SignFile(BSTR CertID, BSTR InFile) ;
	描述：	对文件数字签名
	参数：	BSTR CertID[in]	证书标识
			BSTR  InFile[in]	签名原文文件路径
	返回值：	BSTR ret	签名结果
	空值	失败
	*/
	CLIENTAPI(SERVERAPI(17)) virtual BSTR SOF_SignFile(BSTR CertID, BSTR InFile) = 0;

	/* C18 S18
	原型：	BOOL SOF_VerifySignedFile(BSTR Cert, BSTR InFile, BSTR SignValue) ;
	描述：	验证文件数字签名
	参数：	BSTR Cert[in]	签名者证书
			BSTR  InFile[in]	签名原文文件路径
			BSTR  SignValue[in]	签名值
	返回值：	TRUE	成功
	FALSE	失败
	*/
	CLIENTAPI(SERVERAPI(18)) virtual BOOL SOF_VerifySignedFile(BSTR Cert, BSTR InFile, BSTR SignValue) = 0;

	/* C19 S19
	原型：	BSTR SOF_EncryptData(BSTR SymmKey, BSTR Indata) ;
	描述：	使用对称算法加密数据
	参数：	BSTR Key[in]	加密密钥
			BSTR Indata[in]	待加密的明文
	返回值：	BSTR rv	加密后的密文
			空值		失败
	*/
	CLIENTAPI(SERVERAPI(19)) virtual BSTR SOF_EncryptData(BSTR SymmKey, BSTR Indata) = 0;

	/* C20 S20
	原型：	BSTR SOF_DecryptData(BSTR SymmKey, BSTR Indata) ;
	描述：	使用对称算法解密数据
	参数：	BSTR SymmKey[in]	解密密钥
			BSTR Indata[in]	待解密的密文
	返回值：	BSTR rv	解密后的明文
			空值		失败
	*/
	CLIENTAPI(SERVERAPI(20)) virtual BSTR SOF_DecryptData(BSTR SymmKey, BSTR Indata) = 0;
	 
	/* C21 S21
	原型：	BOOL SOF_EncryptFile(BSTR SymmKey, BSTR InFile, BSTR OutFile) ;
	描述：	使用对称算法加密文件
	参数：	BSTR SymmKey[in]	加密密钥
			BSTR InFile[in]	待加密的明文文件路径
			BSTR OutFile[in]	密文文件保存路径
	返回值：	TRUE	成功
			FALSE	失败
	*/
	CLIENTAPI(SERVERAPI(21)) virtual BOOL SOF_EncryptFile(BSTR SymmKey, BSTR InFile, BSTR OutFile) = 0;

	/* C22 S22
	原型：	BOOL SOF_DecryptFile(BSTR SymmKey, BSTR InFile, BSTR OutFile) ;
	描述：	使用对称算法解密文件
	参数：	BSTR SymmKey[in]	解密密钥
			BSTR InFile[in]	待解密的密文文件路径
			BSTR OutFile[in]	明文文件保存路径
	返回值：	TRUE	成功
	FALSE	失败
	*/
	CLIENTAPI(SERVERAPI(22)) virtual BOOL SOF_DecryptFile(BSTR SymmKey, BSTR InFile, BSTR OutFile) = 0;

	/* C23 S23
	原型：	BSTR SOF_PubKeyEncrypt(BSTR Cert, BSTR InData) ;
	描述：	使用证书对数据加密。（PKCS#1格式）
	参数：	BSTR Cert[in]	证书
			BSTR InData[in]	待加密的数据
	返回值：	BSTR  rv	成功加密后的密文
	空值	失败
	备注：	因为是PKCS#1格式，故加密的数据长度要小于证书的位数。比如1024位的证书，InData长度必须小于128
	*/
	CLIENTAPI(SERVERAPI(23)) virtual BSTR SOF_PubKeyEncrypt(BSTR Cert, BSTR InData) = 0;

	/* C24 S24
	原型：	BSTR SOF_PriKeyDecrypt(BSTR CertID, BSTR InData) ;
	描述：	使用证书对数据加密。（PKCS#1格式）
	参数：	BSTR Cert[in]
			BSTR InData[in]
	返回值：	BSTR  rv
			空值
	备注：	因为是PKCS#1格式，故加密的数据长度要小于证书的位数。比如1024位的证书，InData长度必须小于128
	*/
	CLIENTAPI(SERVERAPI(24)) virtual BSTR SOF_PriKeyDecrypt(BSTR CertID, BSTR InData) = 0;

	/* C25 S25
	原型：	BSTR SOF_SignDataByP7(BSTR CertID, BSTR InData)
	描述：	对字符串数据进行数字签名，签名格式为PKCS#7
	参数：	BSTR CertID[in]	证书标识
			BSTR  InData[in]	签名原文
	返回值：	BSTR  ret 	签名结果
			空值	失败
	备注：	PKCS#7签名结果包含原文+签名者证书+签名值。
	*/
	CLIENTAPI(SERVERAPI(25)) virtual BSTR SOF_SignDataByP7(BSTR CertID, BSTR InData) = 0;

	/* C26 S26
	原型：	BOOL SOF_VerifySignedDataByP7 (BSTR P7Data) ;
	描述：	验证数字签名
	参数：	BSTR P7Data[in]	PKCS#7签名包
	返回值：	TRUE	成功
			FALSE	失败
	*/
	CLIENTAPI(SERVERAPI(26)) virtual BOOL SOF_VerifySignedDataByP7(BSTR P7Data) = 0;

	/* C27 S27
	原型：	BSTR SOF_GetP7SignDataInfo ( BSTR P7Data，short type) ;
	描述：	解析PKCS#7签名包的信息，可获得原文、签名值、签名证书等信息
	参数：	BSTR P7Data[in]	PKCS#7签名包
			short type[in]	类型
	返回值：	BSTR ret	成功
			空值	失败
	备注：	类型：1：原文；2：签名者证书；3：签名值
	*/
	CLIENTAPI(SERVERAPI(27)) virtual BSTR SOF_GetP7SignDataInfo(BSTR P7Data, short type) = 0;

	/* C28 S28
	原型：	BSTR SOF_SignDataXML(BSTR CertID, BSTR InData) ;
	描述：	对XML数据进行数字签名，输出符合国际标准的XML签名结果
	参数：	BSTR CertID[in]	证书标识
			BSTR  InData[in]	签名原文，XML格式
	返回值：	BSTR  ret	签名结果
			空值	失败
	备注：	XML签名标准见 http://www.w3.org/TR/xmldsig-core/
	*/
	CLIENTAPI(SERVERAPI(28)) virtual BSTR SOF_SignDataXML(BSTR CertID, BSTR InData) = 0;

	/* C29 S29
	原型：	BOOL  SOF_VerifySignedDataXML (BSTR InData) ;
	描述：	验证xml签名
	参数：	BSTR  InData[in]	XML签名值
	返回值：	TRUE	成功
			FALSE	失败
	备注：	XML签名标准见 http://www.w3.org/TR/xmldsig-core/
	*/
	CLIENTAPI(29) virtual BOOL  SOF_VerifySignedDataXML(BSTR InData) = 0;

	/* C30 S30
	原型：	BSTR  SOF_GetXMLSignatureInfo (BSTR XMLSignedData,short type) ;
	描述：	解析XML签名数据，获取签名值、XML原文、证书等信息
	参数：	BSTR  XMLSignedData[in]
			Type[in]
	返回值：	各项对应的信息
	备注：	type可选的参数和意义：1：xml原文；2：摘要；3：签名值；4：签名证书；5：摘要算法；6：签名算法。失败返回空值
	*/
	CLIENTAPI(SERVERAPI(30)) virtual BSTR  SOF_GetXMLSignatureInfo(BSTR XMLSignedData, short type) = 0;

	/* 31
	原型：	Int SOF_CheckSupport();
	描述：	检查控件是否支持当前操作系统和浏览器版本
	参数：	无
	返回值：	int rv	0表示支持，1表示不支持。
	*/
	CLIENTAPI(31) virtual int SOF_CheckSupport() = 0;

	/* C32 S11
	原型：	BSTR SOF_GenRandom(short len);
	描述：	产生随机数
	参数：	int RanddomLen[in]	待产生的随机数长度（bytes，字节长度）
	返回值：	BSTR rv	随机数值（Base64编码后的）
	*/
	CLIENTAPI(32) SERVERAPI(11) virtual BSTR SOF_GenRandom(short len) = 0;

	/* S31
	原型：	BSTR SOF_CreateTimeStampRequest(BSTR InData);
	描述：	创建时间戳请求
	参数：	BSTR  InData	待创建时间戳请求的原文
	返回值：	BSTR  ret	时间戳请求（base64编码格式）
	空值	失败
	备注：	错误代码：
	SOR_NULLPOINTER: 输入的某一个参数为null
	*/
	SERVERAPI(31) virtual BSTR SOF_CreateTimeStampRequest(BSTR InData) = 0;

	/* S32
	原型：	BSTR SOF_CreateTimeStampResponse (BSTR InData);
	描述：	创建时间戳响应，即签发时间戳
	参数：	BSTR  InData	时间戳请求
	返回值：	BSTR  ret	时间戳响应（base64编码格式）
	空值	失败
	备注：	错误代码：
	SOR_NULLPOINTER: 输入的某一个参数为null。
	SOR_SIGNDATA ：签发时间戳失败
	*/
	SERVERAPI(32) virtual BSTR SOF_CreateTimeStampResponse(BSTR InData) = 0;

	/* S33
	原型：	int  SOF_VerifyTimeStamp(BSTR content，BSTR tsResponseData);
	描述：	验证时间戳
	参数：	BSTR  content	待验证的原文
	BSTR tsResponseData	时间戳
	返回值：	0		成功
	其他	见错误码
	备注：	错误代码：
	SOR_NULLPOINTER: 输入的某一个参数为null。
	SOR_VERIFYSIGNDATA：验证时间戳失败
	*/
	SERVERAPI(33) virtual int  SOF_VerifyTimeStamp(BSTR conten, BSTR tsResponseData) = 0;

	/* S34
	原型：	BSTR SOF_GetTimeStampInfo(BSTR tsResponseData,int type);
	描述：	解析时间戳，获得时间戳的信息，包括时间、时间戳服务器证书、签名值等
	参数：	BSTR tsResponseData	时间戳
	int type	类型
	返回值：	type对应的值	成功
	null	出错
	备注：	错误代码：
	SOR_NULLPOINTER: 输入的某一个参数为null。
	SOR_VERIFYSIGNDATA：验证时间戳失败。
	SOR_PARAMETERNOTSUPPORT：不支持的参数
	type =1：返回时间；type ＝2：返回签名值；type ＝3：返回签名证书。
	*/
	SERVERAPI(34) virtual BSTR SOF_GetTimeStampInfo(BSTR tsResponseData, int type) = 0;

	/* S35
	原型：	int SOF_GetLastError();
	描述：	获得上个函数的错误码
	参数：	无
	*/
	SERVERAPI(35) virtual int SOF_GetLastError() = 0;
};

